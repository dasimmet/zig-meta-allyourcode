
const std = @import("std");
const DefaultBuildOptions = @import("../build.zig").DefaultBuildOptions;

pub fn addBuild(b: *std.Build, defaults: DefaultBuildOptions) void {
    if (b.lazyDependency("wabt", .{
        .target = defaults.target,
        .optimize = defaults.optimize,
    })) |wabt| {
        const lib = b.addStaticLibrary(.{
            .name = "wabt",
            .target = defaults.target,
            .optimize = defaults.optimize,
        });
        lib.linkLibCpp();
        lib.addIncludePath(wabt.path("include"));
        lib.addIncludePath(b.path("src/include"));
        if (b.lazyDependency("wasmc", .{})) |wasmc| {
            lib.addIncludePath(wasmc.path("include"));
        }
        if (b.lazyDependency("picosha", .{})) |picosha| {
            lib.addIncludePath(picosha.path(""));
        }
        // lib.linkSystemLibrary("ssl");
        lib.addCSourceFiles(.{
            .files = &.{
                "src/apply-names.cc",
                "src/binary-reader-ir.cc",
                "src/binary-reader-logging.cc",
                "src/binary-reader.cc",
                "src/binary-writer-spec.cc",
                "src/binary-writer.cc",
                "src/binary.cc",
                "src/binding-hash.cc",
                "src/color.cc",
                "src/common.cc",
                "src/config.cc",
                "src/decompiler.cc",
                "src/error-formatter.cc",
                "src/expr-visitor.cc",
                "src/feature.cc",
                "src/filenames.cc",
                "src/generate-names.cc",
                "src/ir-util.cc",
                "src/ir.cc",
                "src/leb128.cc",
                "src/lexer-source-line-finder.cc",
                "src/lexer-source.cc",
                "src/literal.cc",
                "src/opcode-code-table.c",
                "src/opcode.cc",
                "src/option-parser.cc",
                "src/resolve-names.cc",
                "src/sha256.cc",
                "src/shared-validator.cc",
                "src/stream.cc",
                "src/token.cc",
                "src/tracing.cc",
                "src/type-checker.cc",
                "src/utf8.cc",
                "src/validator.cc",
                "src/wast-lexer.cc",
                "src/wast-parser.cc",
                "src/wat-writer.cc",
                "src/c-writer.cc",
                "src/prebuilt/wasm2c_header_top.cc",
                "src/prebuilt/wasm2c_header_bottom.cc",
                "src/prebuilt/wasm2c_source_includes.cc",
                "src/prebuilt/wasm2c_source_declarations.cc",
                "src/prebuilt/wasm2c_simd_source_declarations.cc",
                "src/prebuilt/wasm2c_atomicops_source_declarations.cc",
                "src/interp/binary-reader-interp.cc",
                "src/interp/interp.cc",
                "src/interp/interp-util.cc",
                "src/interp/istream.cc",
                "wasm2c/wasm-rt-impl.c",
                "wasm2c/wasm-rt-exceptions-impl.c",
                "wasm2c/wasm-rt-mem-impl.c",
                "src/apply-names.cc",
                "src/binary-reader-ir.cc",
                "src/binary-reader-logging.cc",
                "src/binary-reader.cc",
                "src/binary-writer-spec.cc",
                "src/binary-writer.cc",
                "src/binary.cc",
                "src/binding-hash.cc",
                "src/color.cc",
                "src/common.cc",
                "src/config.cc",
                "src/decompiler.cc",
                "src/error-formatter.cc",
                "src/expr-visitor.cc",
                "src/feature.cc",
                "src/filenames.cc",
                "src/generate-names.cc",
                "src/ir-util.cc",
                "src/ir.cc",
                "src/leb128.cc",
                "src/lexer-source-line-finder.cc",
                "src/lexer-source.cc",
                "src/literal.cc",
                "src/opcode-code-table.c",
                "src/opcode.cc",
                "src/option-parser.cc",
                "src/resolve-names.cc",
                "src/sha256.cc",
                "src/shared-validator.cc",
                "src/stream.cc",
                "src/token.cc",
                "src/tracing.cc",
                "src/type-checker.cc",
                "src/utf8.cc",
                "src/validator.cc",
                "src/wast-lexer.cc",
                "src/wast-parser.cc",
                "src/wat-writer.cc",
                "src/c-writer.cc",
                "src/prebuilt/wasm2c_header_top.cc",
                "src/prebuilt/wasm2c_header_bottom.cc",
                "src/prebuilt/wasm2c_source_includes.cc",
                "src/prebuilt/wasm2c_source_declarations.cc",
                "src/prebuilt/wasm2c_simd_source_declarations.cc",
                "src/prebuilt/wasm2c_atomicops_source_declarations.cc",
                "src/interp/binary-reader-interp.cc",
                "src/interp/interp.cc",
                "src/interp/interp-util.cc",
                "src/interp/istream.cc",
                "src/interp/interp-wasm-c-api.cc",
            },
            .root = wabt.path(""),
        });
        b.installArtifact(lib);
    }
}
